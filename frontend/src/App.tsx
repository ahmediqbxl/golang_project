/**
 * Main application component for the Task Manager.
 * This component manages the state of tasks and handles all CRUD operations.
 * It also provides the drag-and-drop context for task management.
 */
import React, { useState, useEffect } from 'react';
import { DndProvider } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import axios from 'axios';
import TaskColumn from './components/TaskColumn';
import TaskForm from './components/TaskForm';
import './App.css';

/**
 * Interface defining the structure of a Task object
 * @interface Task
 * @property {string} id - Unique identifier for the task
 * @property {string} title - Title of the task
 * @property {string} description - Detailed description of the task
 * @property {'high' | 'medium' | 'low'} priority - Priority level of the task
 * @property {string} dueDate - Due date of the task in string format
 */
interface Task {
  id: string;
  title: string;
  description: string;
  priority: 'high' | 'medium' | 'low';
  dueDate: string;
}

const App: React.FC = () => {
  // State to store all tasks
  const [tasks, setTasks] = useState<Task[]>([]);

  // Fetch tasks when component mounts
  useEffect(() => {
    fetchTasks();
  }, []);

  /**
   * Fetches all tasks from the backend API
   * @async
   * @function fetchTasks
   * @returns {Promise<void>}
   */
  const fetchTasks = async () => {
    try {
      console.log('Fetching tasks...');
      const response = await axios.get<Task[]>('http://localhost:8080/api/tasks');
      console.log('Tasks received:', response.data);
      setTasks(response.data);
    } catch (error) {
      console.error('Error fetching tasks:', error);
      if (error && typeof error === 'object' && 'response' in error) {
        const axiosError = error as { response?: { status?: number; data?: any }; message?: string };
        console.error('Error details:', {
          status: axiosError.response?.status,
          data: axiosError.response?.data,
          message: axiosError.message
        });
      }
    }
  };

  /**
   * Creates a new task and updates the state
   * @async
   * @function handleTaskCreate
   * @param {Omit<Task, 'id'>} task - Task object without the id (will be generated by backend)
   * @returns {Promise<void>}
   */
  const handleTaskCreate = async (task: Omit<Task, 'id'>) => {
    try {
      const response = await axios.post<Task>('http://localhost:8080/api/tasks', task);
      // Refresh the task list to ensure we have the latest data
      await fetchTasks();
    } catch (error) {
      console.error('Error creating task:', error);
    }
  };

  /**
   * Updates an existing task and updates the state
   * @async
   * @function handleTaskUpdate
   * @param {Task} task - Updated task object
   * @returns {Promise<void>}
   */
  const handleTaskUpdate = async (task: Task) => {
    try {
      await axios.put(`http://localhost:8080/api/tasks/${task.id}`, task);
      setTasks(tasks.map(t => t.id === task.id ? task : t));
    } catch (error) {
      console.error('Error updating task:', error);
    }
  };

  /**
   * Deletes a task and updates the state
   * @async
   * @function handleTaskDelete
   * @param {string} id - ID of the task to delete
   * @returns {Promise<void>}
   */
  const handleTaskDelete = async (id: string) => {
    try {
      await axios.delete(`http://localhost:8080/api/tasks/${id}`);
      setTasks(tasks.filter(task => task.id !== id));
    } catch (error) {
      console.error('Error deleting task:', error);
    }
  };

  return (
    <DndProvider backend={HTML5Backend}>
      <div className="app">
        <h1>Task Manager</h1>
        {/* Task creation form */}
        <TaskForm onSubmit={handleTaskCreate} />
        <div className="columns">
          {/* High priority tasks column */}
          <TaskColumn
            title="High Priority"
            tasks={tasks.filter(task => task.priority === 'high')}
            onUpdate={handleTaskUpdate}
            onDelete={handleTaskDelete}
          />
          {/* Medium priority tasks column */}
          <TaskColumn
            title="Medium Priority"
            tasks={tasks.filter(task => task.priority === 'medium')}
            onUpdate={handleTaskUpdate}
            onDelete={handleTaskDelete}
          />
          {/* Low priority tasks column */}
          <TaskColumn
            title="Low Priority"
            tasks={tasks.filter(task => task.priority === 'low')}
            onUpdate={handleTaskUpdate}
            onDelete={handleTaskDelete}
          />
        </div>
      </div>
    </DndProvider>
  );
};

export default App; 