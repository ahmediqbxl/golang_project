{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ahmed\\\\OneDrive\\\\Desktop\\\\Personal\\\\golang_project\\\\frontend\\\\src\\\\components\\\\TaskCard.tsx\",\n  _s = $RefreshSig$();\n/**\r\n * TaskCard component for displaying and managing individual tasks\r\n * Supports drag-and-drop functionality and inline editing\r\n */\nimport React, { useState } from 'react';\nimport { useDrag } from 'react-dnd';\n\n/**\r\n * Task interface defining the structure of a task\r\n * @interface Task\r\n */\n\n/**\r\n * Props interface for TaskCard component\r\n * @interface TaskCardProps\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\r\n * TaskCard functional component\r\n * @param {TaskCardProps} props - Component props\r\n * @returns {JSX.Element} Card displaying task information with edit/delete functionality\r\n */\nconst TaskCard = ({\n  task,\n  onUpdate,\n  onDelete\n}) => {\n  _s();\n  // State for managing edit mode and edited task data\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedTask, setEditedTask] = useState(task);\n\n  // Drag and drop functionality using react-dnd\n  const [{\n    isDragging\n  }, drag] = useDrag(() => ({\n    type: 'task',\n    item: task,\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging()\n    })\n  }));\n\n  /**\r\n   * Handles entering edit mode\r\n   */\n  const handleEdit = () => {\n    setIsEditing(true);\n  };\n\n  /**\r\n   * Handles saving edited task\r\n   */\n  const handleSave = () => {\n    onUpdate(editedTask);\n    setIsEditing(false);\n  };\n\n  /**\r\n   * Handles task deletion\r\n   */\n  const handleDelete = () => {\n    onDelete(task.id);\n  };\n\n  // Render edit form when in editing mode\n  if (isEditing) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-card editing\",\n      ref: drag,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: editedTask.title,\n        onChange: e => setEditedTask({\n          ...editedTask,\n          title: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: editedTask.description,\n        onChange: e => setEditedTask({\n          ...editedTask,\n          description: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: editedTask.dueDate,\n        onChange: e => setEditedTask({\n          ...editedTask,\n          dueDate: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsEditing(false),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render task card in view mode\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `task-card ${isDragging ? 'dragging' : ''}`,\n    ref: drag,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: task.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: task.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Due: \", new Date(task.dueDate).toLocaleDateString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleEdit,\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDelete,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskCard, \"jQ1Il1d6/O5tZEc6SeFJs10j0GI=\", false, function () {\n  return [useDrag];\n});\n_c = TaskCard;\nexport default TaskCard;\nvar _c;\n$RefreshReg$(_c, \"TaskCard\");","map":{"version":3,"names":["React","useState","useDrag","jsxDEV","_jsxDEV","TaskCard","task","onUpdate","onDelete","_s","isEditing","setIsEditing","editedTask","setEditedTask","isDragging","drag","type","item","collect","monitor","handleEdit","handleSave","handleDelete","id","className","ref","children","value","title","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","description","dueDate","onClick","Date","toLocaleDateString","_c","$RefreshReg$"],"sources":["C:/Users/ahmed/OneDrive/Desktop/Personal/golang_project/frontend/src/components/TaskCard.tsx"],"sourcesContent":["/**\r\n * TaskCard component for displaying and managing individual tasks\r\n * Supports drag-and-drop functionality and inline editing\r\n */\r\nimport React, { useState } from 'react';\r\nimport { useDrag } from 'react-dnd';\r\nimport { DragSourceMonitor } from 'react-dnd';\r\n\r\n/**\r\n * Task interface defining the structure of a task\r\n * @interface Task\r\n */\r\ninterface Task {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  priority: 'high' | 'medium' | 'low';\r\n  dueDate: string;\r\n}\r\n\r\n/**\r\n * Props interface for TaskCard component\r\n * @interface TaskCardProps\r\n */\r\ninterface TaskCardProps {\r\n  task: Task;\r\n  onUpdate: (task: Task) => void;\r\n  onDelete: (id: string) => void;\r\n}\r\n\r\n/**\r\n * TaskCard functional component\r\n * @param {TaskCardProps} props - Component props\r\n * @returns {JSX.Element} Card displaying task information with edit/delete functionality\r\n */\r\nconst TaskCard: React.FC<TaskCardProps> = ({ task, onUpdate, onDelete }) => {\r\n  // State for managing edit mode and edited task data\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [editedTask, setEditedTask] = useState<Task>(task);\r\n\r\n  // Drag and drop functionality using react-dnd\r\n  const [{ isDragging }, drag] = useDrag(() => ({\r\n    type: 'task',\r\n    item: task,\r\n    collect: (monitor: DragSourceMonitor) => ({\r\n      isDragging: !!monitor.isDragging(),\r\n    }),\r\n  }));\r\n\r\n  /**\r\n   * Handles entering edit mode\r\n   */\r\n  const handleEdit = () => {\r\n    setIsEditing(true);\r\n  };\r\n\r\n  /**\r\n   * Handles saving edited task\r\n   */\r\n  const handleSave = () => {\r\n    onUpdate(editedTask);\r\n    setIsEditing(false);\r\n  };\r\n\r\n  /**\r\n   * Handles task deletion\r\n   */\r\n  const handleDelete = () => {\r\n    onDelete(task.id);\r\n  };\r\n\r\n  // Render edit form when in editing mode\r\n  if (isEditing) {\r\n    return (\r\n      <div className=\"task-card editing\" ref={drag}>\r\n        {/* Title input */}\r\n        <input\r\n          type=\"text\"\r\n          value={editedTask.title}\r\n          onChange={(e) => setEditedTask({ ...editedTask, title: e.target.value })}\r\n        />\r\n        {/* Description textarea */}\r\n        <textarea\r\n          value={editedTask.description}\r\n          onChange={(e) => setEditedTask({ ...editedTask, description: e.target.value })}\r\n        />\r\n        {/* Due date input */}\r\n        <input\r\n          type=\"date\"\r\n          value={editedTask.dueDate}\r\n          onChange={(e) => setEditedTask({ ...editedTask, dueDate: e.target.value })}\r\n        />\r\n        {/* Action buttons */}\r\n        <button onClick={handleSave}>Save</button>\r\n        <button onClick={() => setIsEditing(false)}>Cancel</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Render task card in view mode\r\n  return (\r\n    <div\r\n      className={`task-card ${isDragging ? 'dragging' : ''}`}\r\n      ref={drag}\r\n    >\r\n      {/* Task title */}\r\n      <h3>{task.title}</h3>\r\n      {/* Task description */}\r\n      <p>{task.description}</p>\r\n      {/* Formatted due date */}\r\n      <p>Due: {new Date(task.dueDate).toLocaleDateString()}</p>\r\n      {/* Action buttons */}\r\n      <div className=\"task-actions\">\r\n        <button onClick={handleEdit}>Edit</button>\r\n        <button onClick={handleDelete}>Delete</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskCard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}